#3

import cv2
import numpy as np

# Load image in grayscale
def load_image(path):
    image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
    if image is None:
        print("Error: Could not load image")
        exit()
    return image

# Apply Sobel filter to detect edges in X and Y directions
def apply_sobel(image):
    sobelx = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    sobely = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    sobel_combined = cv2.magnitude(sobelx, sobely)
    return sobel_combined

# Apply Laplacian filter to detect edges
def apply_laplacian(image):
    laplacian = cv2.Laplacian(image, cv2.CV_64F)
    return laplacian

# Apply Canny edge detector
def apply_canny(image, threshold1, threshold2):
    canny_edges = cv2.Canny(image, threshold1, threshold2)
    return canny_edges

def main():
    image_path = input("Enter the image path: ").strip()
    image = load_image(image_path)

    # Apply filters
    sobel_edges = apply_sobel(image)
    laplacian_edges = apply_laplacian(image)
    canny_edges = apply_canny(image, 100, 200)

    # Display results
    cv2.imshow('Original Image', image)
    cv2.imshow('Sobel Edges', np.uint8(sobel_edges))
    cv2.imshow('Laplacian Edges', np.uint8(laplacian_edges))
    cv2.imshow('Canny Edges', canny_edges)

    # Save images if user wants
    save_option = input("Do you want to save the processed images? (yes/no): ").strip().lower()
    if save_option == "yes":
        cv2.imwrite("sobel_edges.jpg", np.uint8(sobel_edges))
        cv2.imwrite("laplacian_edges.jpg", np.uint8(laplacian_edges))
        cv2.imwrite("canny_edges.jpg", canny_edges)
        print("Processed images saved successfully!")

    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
